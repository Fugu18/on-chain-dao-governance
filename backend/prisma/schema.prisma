generator client {
  provider = "prisma-client-js"
  output   = "dao-governance-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  id     BigInt   @id @default(autoincrement()) @db.BigInt
  hash   Bytes    @unique
  height BigInt   @db.BigInt
  slot   BigInt   @unique @db.BigInt
  time   DateTime @db.Timestamptz(6)

  polls          Poll[]          @relation("ParentBlock")
  proposals      Proposal[]      @relation("ParentBlock")
  proposalStates ProposalState[] @relation("ParentBlock")
}

model Poll {
  id          BigInt   @id @default(autoincrement()) @db.BigInt
  // slot and txHash are referring to the first proposal
  slot        BigInt   @db.BigInt
  txHash      Bytes    @unique
  start       DateTime @db.Timestamptz(6)
  end         DateTime @db.Timestamptz(6)
  // Snapshot date for voting power (default = start)
  snapshot    DateTime @db.Timestamptz(6)
  description String

  block     Block      @relation("ParentBlock", fields: [slot], references: [slot], onDelete: Cascade)
  proposals Proposal[]

  @@index([slot])
}

model Proposal {
  id                BigInt @id @default(autoincrement()) @db.BigInt
  ownerAddress      String
  ownerPubKeyHash   Bytes
  ownerStakeKeyHash Bytes?
  txHash            Bytes  @unique
  outputIndex       BigInt @db.BigInt
  slot              BigInt @db.BigInt
  pollId            BigInt @db.BigInt
  uri               String
  name              String
  description       String
  communityUri      String

  block           Block            @relation("ParentBlock", fields: [slot], references: [slot], onDelete: Cascade)
  poll            Poll             @relation(fields: [pollId], references: [id], onDelete: Cascade)
  proposalChoices ProposalChoice[]
  proposalStates  ProposalState[]

  @@index([slot])
  @@index([pollId])
}

model ProposalState {
  id           BigInt         @id @default(autoincrement()) @db.BigInt
  proposalId   BigInt         @db.BigInt
  slot         BigInt         @db.BigInt
  txHash       Bytes
  // cancelReason is nonempty if status = CANCELLED
  cancelReason String?
  status       ProposalStatus @default(AVAILABLE)

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  block    Block    @relation("ParentBlock", fields: [slot], references: [slot], onDelete: Cascade)

  @@index([proposalId])
  @@index([slot])
}

enum ProposalStatus {
  AVAILABLE // Available to be transferred to other status
  CANCELLED // Cancelled (in case of emergency) by DAO delegate if the proposal is malicious
  PASSED // Passed community vote
  FAILED // Failed community vote
}

model ProposalChoice {
  id         BigInt             @id @default(autoincrement()) @db.BigInt
  proposalId BigInt             @db.BigInt
  index      Int
  type       ProposalChoiceType
  value      String

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@unique([proposalId, index])
  @@index([proposalId])
}

enum ProposalChoiceType {
  ACCEPT
  REJECT
}
